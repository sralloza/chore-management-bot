plugins {
    id 'groovy'
    id 'java'
    id 'io.freefair.lombok' version '6.4.1'
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'

        showExceptions true
        exceptionFormat 'full'
        showCauses true
        showStackTraces true

        showStandardStreams false
    }
}

group 'es.sralloza'
version '0.3.2'

repositories {
    mavenCentral()
}

dependencies {
    // Utils
    implementation 'org.projectlombok:lombok:1.18.24'
    implementation 'com.google.inject:guice:5.1.0'
    implementation 'com.typesafe:config:1.4.2'
    implementation 'org.scilab.forge:jlatexmath:1.0.7'

    // HTTP
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'

    // Json encoding
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.0'

    // Redis
    implementation 'redis.clients:jedis:4.3.1'

    // Telegram
    implementation 'org.telegram:telegrambots:6.1.0'
    implementation 'org.telegram:telegrambots-abilities:6.1.0'

    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'com.tersesystems.logback:logback-classic:1.1.1'
    implementation('com.tersesystems.logback:logback-structured-config:1.0.3') {
        exclude group: 'junit', module: 'junit'
    }
    implementation 'com.tersesystems.logback:logback-typesafe-config:1.1.1'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    // Testing
    testImplementation('com.squareup.okhttp3:mockwebserver:4.9.3') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation 'org.mockito:mockito-core:5.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport:5.8.2'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes "Main-Class": "Main"
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
